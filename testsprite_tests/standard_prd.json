{
  "meta": {
    "project": "Real-Time Messaging Application",
    "date": "2025-09-13",
    "prepared_by": "Generated by Product Manager"
  },
  "product_overview": "A real-time messaging application enabling users to communicate instantly through text messages with features like user authentication, message history, and online status indicators. It targets individuals and small teams who require seamless, responsive instant messaging capabilities.",
  "core_goals": [
    "Provide secure and reliable user authentication with email/password and protected routes.",
    "Enable real-time messaging with typing indicators and online status for seamless communication.",
    "Maintain comprehensive message management including send/receive, read status, and conversation history.",
    "Facilitate effective contact management with search and add contact features.",
    "Offer user profile management including status updates, avatar changes, and notification preferences.",
    "Ensure a responsive and intuitive user interface accessible on desktop and mobile devices.",
    "Support robust backend architecture with scalable API and database design."
  ],
  "key_features": [
    "User Authentication: Secure login, registration, JWT token management, and password recovery.",
    "Real-time Chat System: Instant messaging using Socket.io with typing indicators and online/offline status updates.",
    "Message Management: Sending, receiving, storing messages with read statuses and paginated history.",
    "Contact Management: Adding new contacts, searching users, and displaying contact lists with online statuses.",
    "User Profile Management: Updating profile info, avatar, bios, and notification preferences.",
    "Conversation Management: Displaying conversations with the latest messages, unread counts, and pagination.",
    "Route Protection: Authentication guards for protected routes ensuring data privacy.",
    "API Server: RESTful backend with Express.js handling authentication, messaging, and user management.",
    "Responsive UI: Mobile-first design with intuitive navigation, clean layouts, and accessibility features."
  ],
  "user_flow_summary": [
    "User registers via email/password and verifies account before accessing the chat dashboard.",
    "Authenticated user logs in, views contact list and recent conversations on the chat dashboard.",
    "User selects a contact to open chat room, sends and receives real-time messages with typing indicators and message status updates.",
    "User views message history with pagination and notices online/offline status of contacts.",
    "User accesses profile settings to update display name, avatar, bio, notification preferences, or manage account security.",
    "User logs out securely, with session termination and token invalidation."
  ],
  "validation_criteria": [
    "Successful user registration creates profile, stores hashed password and sends verification.",
    "Login issues valid JWT tokens, maintains session, and restricts access on invalid credentials.",
    "Messages sent via Socket.io are delivered in real-time, accurately stored in database, and reflect read statuses.",
    "Contact operations (add/search) reflect accurately in contact list and persist in database.",
    "Profile updates are saved and immediately reflected in user data displayed.",
    "All API endpoints conform to designed request/response formats with proper error handling.",
    "UI components render correctly across devices and screen sizes, supporting accessibility standards.",
    "Route protection mechanisms prevent unauthorized data access and redirect appropriately.",
    "System maintains stable performance during concurrent real-time messaging sessions."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Node.js",
      "Express.js",
      "Socket.io",
      "Supabase",
      "PostgreSQL",
      "Vite",
      "TailwindCSS",
      "JWT Authentication",
      "Zustand",
      "React Router"
    ],
    "features": [
      {
        "name": "Authentication System",
        "description": "Complete user authentication with login, register, JWT tokens, and protected routes",
        "files": [
          "src/contexts/AuthContext.tsx",
          "src/components/auth/Login.tsx",
          "src/components/auth/Register.tsx",
          "api/routes/auth.ts"
        ]
      },
      {
        "name": "Real-time Chat System",
        "description": "Socket.io powered real-time messaging with typing indicators and online status",
        "files": [
          "src/contexts/SocketContext.tsx",
          "src/components/chat/ChatRoom.tsx",
          "src/components/chat/ChatDashboard.tsx",
          "api/app.ts"
        ]
      },
      {
        "name": "Message Management",
        "description": "Send, receive, and manage messages with read status and conversation history",
        "files": [
          "api/routes/messages.ts",
          "src/components/chat/ChatRoom.tsx",
          "src/types/message.ts"
        ]
      },
      {
        "name": "Contact Management",
        "description": "Add contacts, search users, and manage contact lists",
        "files": [
          "src/components/chat/AddContactModal.tsx",
          "src/components/chat/ContactList.tsx",
          "api/routes/messages.ts"
        ]
      },
      {
        "name": "User Profile Management",
        "description": "User profile settings, status updates, and avatar management",
        "files": [
          "src/components/profile/ProfileSettings.tsx",
          "api/routes/auth.ts"
        ]
      },
      {
        "name": "Database Schema",
        "description": "Supabase PostgreSQL database with users, messages, contacts, and sessions tables",
        "files": [
          "supabase/migrations/001_initial_schema.sql",
          "api/config/supabase.ts"
        ]
      },
      {
        "name": "Conversation Management",
        "description": "Display and manage conversation lists with latest messages and unread counts",
        "files": [
          "src/components/chat/ConversationList.tsx",
          "api/routes/messages.ts"
        ]
      },
      {
        "name": "Route Protection",
        "description": "Protected and public routes with authentication guards",
        "files": [
          "src/App.tsx"
        ]
      },
      {
        "name": "API Server",
        "description": "Express.js REST API with CORS, authentication middleware, and health checks",
        "files": [
          "api/app.ts",
          "api/server.ts"
        ]
      },
      {
        "name": "Development Environment",
        "description": "Vite development server with hot reload, proxy configuration, and concurrent backend/frontend",
        "files": [
          "vite.config.ts",
          "package.json",
          "nodemon.json"
        ]
      }
    ]
  }
}
